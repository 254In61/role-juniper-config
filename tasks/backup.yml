---
- name: Set varibales
  ansible.builtin.set_fact:
    tmp_file_path: "{{ tmp_root_dir }}/{{ inventory_hostname }}-running-config.cfg"
    inventory_hostname_dir_path: "{{ tmp_root_dir }}/{{ git_repo_name }}/{{ vendor_dir }}/{{ inventory_hostname }}/config-backup"
  delegate_to: localhost
  ignore_errors: true # You want the role to run end to end

- name: Collect junos device running configs
  junipernetworks.junos.junos_command:
    commands: show configuration
    display: set
  register: config_output
  ignore_errors: true

- name: Display task results
  ansible.builtin.debug:
    var: config_output

# Change netconf port from 830 to 22 if above failed.
- block:
    - name: Change netconf port from 830 to 22
      ansible.builtin.set_fact:
        ansible_port: 22

    - name: Collect junos device running configs
      junipernetworks.junos.junos_command:
        commands: show configuration
        display: set
      register: config_output
      ignore_errors: true
      
  when: config_output.failed
    

- name: Clean up files  # Ensure no git conflicts
  ansible.builtin.shell: |
    cd {{ tmp_root_dir }}
    rm -rf {{ git_repo_name }}
  run_once: true
  ignore_errors: true
  delegate_to: localhost

# regex_replace('\r\n', '\n'): Ensures that the configuration is formatted properly with new lines,
# in case the original output contains carriage return and line feed (\r\n).
- name: Ensure the config is properly formatted
  ansible.builtin.set_fact:
    formatted_config: "{{ config_output.stdout[0] | regex_replace('\r\n', '\n') }}"
  delegate_to: localhost
  ignore_errors: true
  when: config_output["failed"] == false

- name: Save the configuration to the temporary config store
  ansible.builtin.copy:
    content: "{{ formatted_config }}"
    dest: "{{ tmp_file_path }}"
  delegate_to: localhost
  ignore_errors: true
  when: config_output["failed"] == false

# Git tasks

- name: Clone the config backup git repository
  ansible.builtin.git:
    repo: "{{ git_repo_url }}"
    dest: "{{ tmp_root_dir }}/{{ git_repo_name }}"
    version: "{{ git_repo_branch }}"
    force: yes       # Still clone down and overwrite incase local repo is existing.
  # ignore_errors: true # You want this to fail if errors are there
  environment:
    GIT_SSL_NO_VERIFY: "true"
  run_once: true
  delegate_to: localhost
  ignore_errors: true # You want the role to run end to end

# Enable git lfs by default
- name: Enable git lfs by default
  ansible.builtin.shell: |
    cd {{ tmp_root_dir }}/{{ git_repo_name }}
    git lfs track "*.bin"
    git lfs track "*.ucs"
    git lfs track "*.tgz" 
    git lfs pull 
  run_once: true
  ignore_errors: true
  delegate_to: localhost

- name: Ensure inventory_hostname dir is present - create if absent
  ansible.builtin.file:
    path: "{{ inventory_hostname_dir_path }}"
    state: directory
  ignore_errors: true
  delegate_to: localhost

- name: List collected running config files
  ansible.builtin.shell: |
    ls -l {{ tmp_root_dir }}
  run_once: true
  delegate_to: localhost
  register: files_collection
  ignore_errors: true # You want the role to run end to end

# - name: Debug output
#   ansible.builtin.debug:
#     var: files_collection.stdout_lines
#   run_once: true
#   delegate_to: localhost

- name: Copy the .cfg file to local git repo
  ansible.builtin.shell: |
    cp {{ tmp_file_path }} {{ inventory_hostname_dir_path }}
  ignore_errors: true
  delegate_to: localhost

- name: Commit the changes and push to the remote repository
  ansible.builtin.shell: |
     cd {{ tmp_root_dir }}/{{ git_repo_name }}
     git config --global user.name {{ git_user }}
     git config --global user.email {{ git_user_email }}
     git add .
     git commit -m "file updates on $(date)"
     git push
  run_once: true
  environment:
    GIT_SSL_NO_VERIFY: "true"
  ignore_errors: true # You want the role to run end to end
  delegate_to: localhost

# Might not need this since containers are ephemeral.
# But if testing or end up running the playbook more than once in the same container, this comes in handy
- name: Clean up files
  ansible.builtin.shell: |
    cd {{ tmp_root_dir }}
    rm -rf {{ git_repo_name }}
  run_once: true
  ignore_errors: true
  delegate_to: localhost